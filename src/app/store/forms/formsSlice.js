import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'
import {fetchFormById, fetchForms, upsertForm} from './formsAPI'
import { toast } from "react-toastify";


const initialState = {
  data: [],
  detailForm: undefined,
  successUpsert: false,
  status: "init",
  upsertError: "",
  fetchError: ""
}

export const fetchFormsAsync = createAsyncThunk(
  'forms/fetch',
  async (username) => {
    return await fetchForms(username)
  }
)
export const fetchFormByIdAsync = createAsyncThunk(
  'forms/fetch_by_id',
  async ({username, id}) => {
    return await fetchFormById(username, id)
  }
)

export const upsertFormAsync = createAsyncThunk(
  'forms/upsert',
  async ({data, username}) => {
    return await upsertForm(data, username)
  }
)

export const formsSlice = createSlice({
  name: 'forms',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clear: (state) => {
      return initialState
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchFormsAsync.pending, (state) => {
        state.status = 'loading'
        state.fetchError=""
      })
      .addCase(fetchFormsAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.data = action.payload
      }).addCase(fetchFormsAsync.rejected, (state, action) => {
        state.status = 'idle'
        state.fetchError=action.error.message
      })

      .addCase(fetchFormByIdAsync.pending, (state) => {
          state.status = 'loading'
          state.fetchError = ""
          state.detailForm = undefined
        })
      .addCase(fetchFormByIdAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.detailForm = action.payload
      }).addCase(fetchFormByIdAsync.rejected, (state, action) => {
        state.status = 'idle'
        state.fetchError=action.error.message
      })

      .addCase(upsertFormAsync.pending, (state) => {
        state.status = 'loading'
        state.upsertError = ""
      })
      .addCase(upsertFormAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        const data = state.data.filter((item) => item.id !== action.payload['id'])
        data.push(action.payload)
        state.data = data;
        toast("success", { autoClose: 2000, type: 'success' })
      }).addCase(upsertFormAsync.rejected, (state, action) => {
        state.status = 'idle'
        state.upsertError=action.error.message
      })
  },
})

export const { logout } = formsSlice.actions

export const selectForms = (state) => state.forms


export default formsSlice.reducer
