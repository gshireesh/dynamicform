import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'
import {fetchResponses} from './responsesAPI'


const initialState = {
  data: [],
  status: "init",
  fetchError: ""
}

export const fetchResponsesAsync = createAsyncThunk(
  'responses/fetch',
  async ({username, id}) => {
    return await fetchResponses(username, id)
  }
)

export const responsesSlice = createSlice({
  name: 'responses',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearResponses: (state) => {
      return initialState
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchResponsesAsync.pending, (state) => {
        state.status = 'loading'
        state.fetchError=""
      })
      .addCase(fetchResponsesAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.data = action.payload
      }).addCase(fetchResponsesAsync.rejected, (state, action) => {
        state.status = 'idle'
        state.fetchError=action.error.message
      })
  },
})

export const { clearResponses } = responsesSlice.actions

export const selectResponses = (state) => state.responses


export default responsesSlice.reducer
